// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uniform RWStructuredBuffer<float3> position : register(u1);
uniform RWStructuredBuffer<float3> velocity : register(u2);

[numthreads(256,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Total force
	float3 t_force = float3(0.0f, 0.0f, 0.0f);

	// Iterate every "star".
	for (uint i = 0; i < 256 * 256; i++)
	{
		float dist = distance(position[i], position[id.x]);
		// We'll pretend we're in a 2D universe where g = inverse distance rather than g = inverse distance^2
		// Otherwise the forces end up to such a range that we'll start having issues with floating point precision.
		// Plus, with the inverse square law, we'd have to be more careful in tuning the time and size scales etc - otherwise we end up with something extremely unstable.
		float g = 1.0 / dist * 0.0001;

		// Direction vector. We add 1e-10 to avoid NaN when length == 0
		float3 dir = position[i] - position[id.x];
		dir = dir / (length(dir) + 1e-10);

		float3 force;
		force = g * dir * 0.001;

		// Don't apply the force to total force if the object would be affecting itself.
		if (i != id.x)
			t_force += force;
	}

	// Simplified Verlet/leapfrog integration
	position[id.x] += velocity[id.x] + t_force/2.0f;
	velocity[id.x] += t_force;
}
